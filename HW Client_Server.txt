@OHomik
Client_Server
1) Клиент-серверная архитектура.
 "Клиент-сервер"- вычислительная или сетевая архитектура, в которой задания или сетевая нагрузка распределены между поставщиками услуг, называемыми серверами, и заказчиками услуг, называемыми клиентами. Фактически клиент и сервер- это програмное обеспечение. Обычно эти программы расположены на разных вычислительных машинах и взаимодействуют между собой через вычислительную сеть по средствам сетевых протоколов, но они могут быть расположены также и на одной машине. Программы-серверы ожидают от клиентских программ запросы и предоставляют им свои ресурсы в виде данных (например, передача файлов посредством HTTP, FTP, BitTorrent, потоковое мультимедиа или работа с базами данных) или в виде сервисных функций (например, работа с электронной почтой, общение посредством систем мгновенного обмена сообщениями или просмотр web- страниц во всемирной паутине). Поскольку одна программа сервер может выполнять запросы от множества программ-клиентов, её размещают на специально выделенной вычислительной машине, настроенной особым образом, как правило, совместно с другими программами- серверами, поэтому производительность данной машины должна быть высокой. Из-за особой роли такой машины в сети, специфики её оборудования и програмного обеспечения, её также называют сервером, а машины, выполняющие клиентские программы, соответственно, клиентами.
 Серверный компонент предоставляет функцию или услугу одному или нескольким клиентам, которые инициируют запросы на такие услуги. Серверы классифицируются по предоставляемым ими услугам. Например, веб-сервер обслуживает веб-страницы, а файловый сервер обслуживает компьютерные файлы. Совместное использование ресурсов сервера представляет собой услугу.
 Является ли компьютер клиентом, сервером или и тем, и другим, определяется характером приложения, которому требуются сервисные функции. Связь между серверами, например, для синхронизации данных, иногда называется межсерверной.
 Клиенты и серверы обмениваются сообщениями в шаблоне запрос-ответ. Обмен происходит в соответствии с определёнными протоколами. 
 Многоуровневая архитектура "клиент-сервер"- разновидность архитектуры "клиент-сервер", в которой функция обработки данных вынесена на несколько отдельных серверов. Это позволяет разделить функции хранения, обработки и представления данных для более эффективного использования возможностей серверов и клиентов. 
 Трёхуровневая архитектура- архитектурная модель програмного комплекса, предполагающая наличие в нём наличие трёх типов компонентов: клиентских приложений (с которыми работают пользователи), серверов приложений (с которыми работают клиентские приложения) и серверов баз данных (с которыми работают серверы приложений).

2) Что такое HTTP и HTTPS
 HTTP (протокол передачи гипертекста)- широко распространённый протокол передачи данных, изначально предназначенный для передачи гипертекстовых документов (то есть документов, которые могут содержать ссылки, позволяющие организовать переход к другим документам). Протокол прикладного уровня. Задача решающаяся при помощи данного протокола- обмен дынными между пользовательским приложением, осуществляющим доступ к веб-ресурсам (обычно это веб-браузер) и веб-сервером.
API многих программных продуктов также подрызумевает использование этого протокола для передачи данных- сами данные при этом могут иметь любой формат, например, XML или JSON.
 HTTPS- название расширения, которое реализует упаковку передаваемых данных в криптографический протокол SSL или TLS, для защиты информации от перехвата и атак.

3)HTTP методы
 HTTP методы- тип HTTP- запроса, который указывает серверу на то, какое действие мы хотим произвести с ресурсом. 
GET запрашивает информацию из указанного источника и не влияет на его содержимое. Запрос доступен для кеширования данных и добавления в закладки. Длинна запроса ограничена. Строка запроса (имя/ значение) отправляется в URL.
POST используется для отправки данных, что может оказывать влияние на содержимое ресурса. Запросы не могут быть кешированы, они не остаются в истории браузера и их нельзя добавить в закладки. Эти запросы не ограничиваются в объёме. Отправленные данные содержатся в теле запроса. 
HEAD аналогичен методу GET, однако в ответе сервера содержится только заголовок, без тела. Обычно применяется для того, чтобы проверить, существует ли ресурс по данному адресу, а так же не изменился ли он с момента последнего обращения.
PUT загружает содержимое запроса на указанный в запросе URI. Если по данному URI ресурса нет, то сервер создаёт его, возвращая статус 201 (Created).
DELETE удаляет указанный ресурс.
OPTIONS используется для описания параметров коммуникации между клиентом и сервером.
CONNECT преобразует соединение запроса в прозрачный TCP/IP-туннель.

4)HTTP статус коды сервера
 Код состояния HTTP- часть первой строки ответа сервера при запросах по протоколу HTTP. Он представляет собой целое трёхразрядное десятичное число. Первая цифра указывает на класс состояния.
 Информационные коды информируют о процессе передачи. Сообщения с такими кодами должны игнорироваться, либо необходимо принять как обычный ответ, серверу ничего отправлять не нужно.
(100, 101, 102, 103)
 Успех. Сообщения данного класса информируют о случаях успешного принятия и обработки запроса клиента.
(200, 201, 202, 203, 204, 205, 206, 207, 208, 226)
 Перенаправленные коды сообщают клиенту, что для успешного выполнения операции необходимо сделать другой запрос, как правило, по другому URI.
(300, 301, 302, 303, 304, 305, 306, 307, 308)
 Ошибка клиента. Класс кодов предназначен для указания ошибки со стороны клиента.
(400-219, 421-426, 428, 429, 431, 434, 449, 451, 499)
 Ошибка сервера. Коды под случаи необработанных исключений при выполнении операций на стороне сервера.
(500-511, 520-526)

5)Что такое ядро браузера?
 Ядро браузера- совокупность HTML- парсера (компонент браузера обрабатывающий HTML), рендера (компонент браузера подготавливающий графическое представление HTML- документа) и ещё нескольких базовых модулей, включая обработчик сценариев JAVA и JAVAScript. 

6)Какие браузеры какие ядра используют?
 Chromium (Blink, V8)
Firefox (движки Gecko, SpiderMonkey)
Internet Explorer (Trident, Chakra JavaScript)
(Legacy) Edge (Edge HTML, Chakra JavaScript)

7)Что такое API?
 Это набор компонентов (классов, функций, процедур, структур), с помощью которых компьютерная программа (бот или сайт) может взаимодействовать с другой программой. Обычно входит в описание какого-либо интернет- протокола, програмного каркаса, стандарта вызова функций операционной системы.

8)Что такое эндпоинты?
 Эндпоинт- адрес на который отправляются сообщения. Эндпоинты работают вместе с методами API. Это определённые URL- адреса, которые приложение использует для связи со сторонними службами и своими пользавателями. URL- это роут, который может обрабатывать разные методы запроса. Каждый тип запроса- это отдельный эндпоинт. (3)

9)URL (URI,URL,URN)
 URL в настоящее время используется для указания расположения почти всех веб-ресурсов. Может обозначать путь как к веб-сайту, так и к какому-либо определённому документу или изображению. URL- адрес показан в адресной строке браузера. Структура url- адреса состоит из: протокола (http, https), доменного имя сайта (в редких случаях ip-адрес), пути к странице.
Статические адреса- остаются неизменными.
Динамические адреса- генерируются в ответ на запросы пользователей и содержат "?", "=", "&".
 URI- имя и адрес ресурса в сети, включает в себя URL и URN.
 URN- имя ресурса в сети, определяет только название ресурса, но не говорит как к нему подключиться.

10)Идемпотентные HTTP методы
 Метод является идемпотентным, если повторный идентичный запрос, сделанный один или несколько раз подряд, имеет один и тот же эффект, не изменяющий состояние сервера. Корректно реализованные методы GET, HEAD, PUT, DELETE идемпотентны, но не POST. Также все безопасные методы являются идемпотентными.

11)Безопасные HTTP методы
 Методы GET и HEAD рассматривают как безопасные, так как они не должны иметь иного значения, кроме загрузки. При использовании методов POST, PUT, Delite браузер предупреждает о потенциально опасном действии и спрашивает стоит ли продолжать.

12)Идентификация, аутентификация, авторизация
 Аутентификация- процедура проверки подлинности, например: проверка подлинности пользователя путём сравнения введённого им пароля (для указанного логина) с паролем, сохранённым в базе данных пользовательских логинов; подтверждение подлинности электронного письма путём проверки цифровой подписи письма по открытому ключу отправителя и т.д.
 Идентификация- процедура, в результате выполнения которой для субъекта идентификации выявляется его идентификатор, однозначно определяющий этого субъекта в информационной системе.
 Авторизация- предоставление определённому лицу или группе лиц прав на выполнение определёных действий.

13)Что такое IP?
 Уникальный адрес идентифицирующий устройство в интернете или локальной сети. IP означает интернет-протокол- набор правил, ругулирующий формат данных, отправляемых через интернет или локальную сеть. По сути это идентификатор, позволяющий передавать информацию между устройствами в сети: он содержит информацию о местонахождении устройства и обеспечивает его доступность для связи.

14)Что такое октаты DNS?
 DNS- ситема доменных имён, которая обеспечивает связь между наименованием сайта и его цифровым адресом. DNS конвертирует доменное имя ресурса в адресной строке браузера в IP адрес и передаёт устройству.
Стоуктура пакета DNS:
Heder- заголовок пакета, состоящий мз 12 октет
Question- клиент передаёт запрос серверу
Ansver- сервер сообщает клиенту ответ
Authority- содержит сведения о том, с помощью каких авторитетных серверов была получена информация
Additional- дополнительные записи, которые относятся к запросу
 
15)Что такое порт, сколько портов у Linux сервера?
 С портами компьютер не путает, что и куда отправлять.
Физический порт- это разъём на компьютере или ноутбуке для флешки, наушников и т.д. Физический порт обменивается электричеством с тем что в него вставлено. В электричестве закодированны какие-то данные.
Программный порт- это "виртуальный разъём" в программе, через который она может обмениваться данными с системой и другими программами.
ss- утилита для проверки открытых портов.

16)Уровни OSI
 Модель OSI- это скелет, фундамент и база всех сетевых сущностей. Модель представляет собой сетевые протоколы, распределяя их на 7 логических уровней:
Физический уровень. Он отвечает за обмен физическими сигналами между физическими устройствами (железом). Железо передаёт всю информацию (текст, картинки и т.д.) в виде битов.
Канальный. Решает вопрос адресации при передаче информации. Этот уровень получает биты и превращает их в кадры. Задача- сформировать кадры с ардесом отправителя и получателя и отправить их по сети.
Сетевой. Маршрутизатор (роутер) получает адреса от коммутаторов с предыдущего уровня и занимаются построением маршрута от одного устройства к другому с учётом всех потенциальных неполадок в сети.
Транспортный. Оснавная задача- транспортировка пакетов.
Сеансовый. Отвечает за поддержку сеанса или сессии связи. Управляет взаимодействием между приложениями, завершение сеанса, обмена информации. пример- видеозвонок. Необходимо чтобы 2 потока данных (аудио, видео) шли синхронно.
Представления данных. Представляет данные в понятном человеку и машине виде. Перевод из одной кодировки в другую.
Прикладной. Использует свои протоколы чтобы пользователь увидел данные в понятном для себя виде.

17)Хедеры HTTP запросов
 Заголовки HTTP- это строки в HTTP- сообщении, содержащие разделённую двоеточием пару имя-значение. Заголовки должны отделяться от тела сообщения хотя бы одной пустой строкой.
General Headers (основные заголовки)- должны включаться в любое сообщение клиента и сервера.
Request Headers (заголовки запроса)- используются только в запросах клиента.
Response Headers (заголовки ответа)- только для ответов от сервера.
Entity Headers (заголовки сущности)- сопровождают каждую сущность сообщения. 
